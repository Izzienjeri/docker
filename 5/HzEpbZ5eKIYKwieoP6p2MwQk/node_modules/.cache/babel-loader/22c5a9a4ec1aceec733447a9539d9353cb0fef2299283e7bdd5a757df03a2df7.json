{"ast":null,"code":"import React from \"react\";\n// Update the return type to always be ReactElement | null\nexport default function PublicWrapper({\n  children,\n  session\n}) {\n  if (!children) {\n    return null; // Return null if no children are passed\n  }\n\n  // Ensure children are valid React elements\n  const processChild = child => {\n    if (! /*#__PURE__*/React.isValidElement(child)) {\n      return null;\n    }\n\n    // If child is a Fragment, process its children\n    if (child.type === React.Fragment) {\n      const element = child;\n      return React.Children.map(element.props.children, processChild);\n    }\n\n    // Clone element with session prop\n    return /*#__PURE__*/React.cloneElement(child, {\n      session,\n      \"data-session\": JSON.stringify(session) // Add session as a prop\n    });\n  };\n  const processedChildren = React.Children.map(children, processChild);\n\n  // Return processed children, wrapping in Fragment if there are multiple children\n  return (processedChildren === null || processedChildren === void 0 ? void 0 : processedChildren.length) === 1 ? processedChildren[0] : /*#__PURE__*/React.createElement(React.Fragment, null, processedChildren);\n}\n_c = PublicWrapper;\nvar _c;\n$RefreshReg$(_c, \"PublicWrapper\");","map":{"version":3,"names":["React","PublicWrapper","children","session","processChild","child","isValidElement","type","Fragment","element","Children","map","props","cloneElement","JSON","stringify","processedChildren","length","createElement","_c","$RefreshReg$"],"sources":["/home/izzie/dev/docker/5/HzEpbZ5eKIYKwieoP6p2MwQk/src/solution.ts"],"sourcesContent":["import React, { ReactNode, ReactElement } from \"react\";\n\ninterface WithSession {\n  session: Session;\n  \"data-session\": string;\n}\n\ninterface Session {\n  user?: {\n    name?: string;\n    email?: string;\n  };\n  [key: string]: any;\n}\n\ninterface PublicWrapperProps {\n  children: ReactNode;  // We want to process each child inside the wrapper\n  session: Session;     // Session to pass down to children\n}\n\n// Update the return type to always be ReactElement | null\nexport default function PublicWrapper({\n  children,\n  session,\n}: PublicWrapperProps): ReactElement | null {\n  if (!children) {\n    return null; // Return null if no children are passed\n  }\n\n  // Ensure children are valid React elements\n  const processChild = (child: ReactNode): ReactNode => {\n    if (!React.isValidElement(child)) {\n      return null;\n    }\n\n    // If child is a Fragment, process its children\n    if (child.type === React.Fragment) {\n      const element = child as ReactElement<{ children?: ReactNode }>;\n      return React.Children.map(element.props.children, processChild);\n    }\n\n    // Clone element with session prop\n    return React.cloneElement<WithSession>(\n      child as ReactElement<WithSession>,\n      { \n        session,\n        \"data-session\": JSON.stringify(session) // Add session as a prop\n      }\n    );\n  };\n\n  const processedChildren = React.Children.map(children, processChild);\n\n  // Return processed children, wrapping in Fragment if there are multiple children\n  return processedChildren?.length === 1 \n    ? processedChildren[0] \n    : React.createElement(React.Fragment, null, processedChildren);\n}\n"],"mappings":"AAAA,OAAOA,KAAK,MAAmC,OAAO;AAoBtD;AACA,eAAe,SAASC,aAAaA,CAAC;EACpCC,QAAQ;EACRC;AACkB,CAAC,EAAuB;EAC1C,IAAI,CAACD,QAAQ,EAAE;IACb,OAAO,IAAI,CAAC,CAAC;EACf;;EAEA;EACA,MAAME,YAAY,GAAIC,KAAgB,IAAgB;IACpD,IAAI,eAACL,KAAK,CAACM,cAAc,CAACD,KAAK,CAAC,EAAE;MAChC,OAAO,IAAI;IACb;;IAEA;IACA,IAAIA,KAAK,CAACE,IAAI,KAAKP,KAAK,CAACQ,QAAQ,EAAE;MACjC,MAAMC,OAAO,GAAGJ,KAA+C;MAC/D,OAAOL,KAAK,CAACU,QAAQ,CAACC,GAAG,CAACF,OAAO,CAACG,KAAK,CAACV,QAAQ,EAAEE,YAAY,CAAC;IACjE;;IAEA;IACA,oBAAOJ,KAAK,CAACa,YAAY,CACvBR,KAAK,EACL;MACEF,OAAO;MACP,cAAc,EAAEW,IAAI,CAACC,SAAS,CAACZ,OAAO,CAAC,CAAC;IAC1C,CACF,CAAC;EACH,CAAC;EAED,MAAMa,iBAAiB,GAAGhB,KAAK,CAACU,QAAQ,CAACC,GAAG,CAACT,QAAQ,EAAEE,YAAY,CAAC;;EAEpE;EACA,OAAO,CAAAY,iBAAiB,aAAjBA,iBAAiB,uBAAjBA,iBAAiB,CAAEC,MAAM,MAAK,CAAC,GAClCD,iBAAiB,CAAC,CAAC,CAAC,gBACpBhB,KAAK,CAACkB,aAAa,CAAClB,KAAK,CAACQ,QAAQ,EAAE,IAAI,EAAEQ,iBAAiB,CAAC;AAClE;AAACG,EAAA,GApCuBlB,aAAa;AAAA,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}