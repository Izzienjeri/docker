1. Implement a React functional component named `PublicWrapper`:
Description: Create a reusable UI component using React's functional component pattern. The component should be named `PublicWrapper`.
Reference: "The `PublicWrapper` function is a React functional component..."

2. Accept `children` and `session` as props:
Description: The `PublicWrapper` component should be designed to receive two input properties: `children` (representing child elements) and `session` (representing user session data).
Reference: "...that takes children and a session as props..."

3. Clone the `children` elements:
Description: Inside the `PublicWrapper` component, make a copy of the `children` elements passed to it.
Reference: "...and clones the children..."

4. Add the `session` as a prop to the cloned `children`:
Description: When cloning the `children` elements, inject the provided `session` object as a new prop into each of the cloned elements.
Reference: "...adding the session as a prop."

5. Support JSX usage with specific `session` and `children`:
Description: The `PublicWrapper` component should be designed to work seamlessly within JSX syntax. It must be able to receive a `session` prop that is an object potentially containing a `user` property, and it should accept `div` elements as valid children.
Reference:
```
    // Example Usage:
    <PublicWrapper session={{ user: "John Doe" }}>
        <div>Hello</div>
    </PublicWrapper>
```

6. Handle `session` prop of any type:
Description: The `session` prop should be flexible enough to accept data of any type without causing type errors.
Reference: "Assume that the `session` prop can be of any type."

7. Define function signature with specific types:
Description: The function signature must include type annotations specifying `children` as `React.ReactElement` and `session` as `Session`.
Reference:
```
export default function PublicWrapper({
    children,
    session
}: {
    children: React.ReactElement,
    session: Session
}) {
    // Your code here
}
```

8. Define interface `Session`:
Description: A TypeScript interface named `Session` needs to be defined to specify the structure of the session data, where `user` is an optional property and `name`, `email` are strings.
Reference:
```
interface Session {
    user?: {
        name: string;
        email?: string;
    };
}
```

9. Ensure Type Safety:
Description: The TypeScript code must be written in a way that guarantees type safety, preventing type-related errors during compilation and runtime.
Reference: "The goal is to make this code type-safe using TypeScript."

10. Ensure Code Correctness:
Description: The code, after adding type annotations, should compile successfully without any errors.
Reference: "You only need to add type annotations to make the code compile without errors."

11. Maintain Code Maintainability:
Description: The code should be easily understandable and modifiable, aided by the clarity provided by type annotations. This is an implicit requirement arising from the use of TypeScript.
Reference: The use of type annotations implies a focus on readability and maintainability.

12. Use `PublicWrapper` as default export:
Description: The module should export the `PublicWrapper` function as its default export, allowing it to be imported easily without specifying the function name explicitly.
Reference:
```export default function PublicWrapper({```

